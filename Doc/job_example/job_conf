[com]
name: printks-2015-10-08
author: Peter's Amazing Bot
email: peter.senna@gmail.com

[cocci]
# The name is important. You should avoid using same name for different
# semantic patches. Notice that the example url ends with: ${name}, you
# should try to split the url this way when possible. curl download the
# url. If you prefer to paste the semantic patch here keep in mind that
# the config  parser expect at least one leading space for each line of
# the cocci file.
name: printk.cocci
#url: https://raw.githubusercontent.com/petersenna/cloudspatch/master/doc/${name}
file: @r1@
 position p;
 @@
 printk(...)@p

 @script:python@
 p << r1.p;
 @@
 print p[0].file, p[0].line

opts: --timeout 120 --no-includes

[git_out]
# cloudspatch will save the results in this git repository, so you need
# write access, and cloudspatch only knows ssh authentication. The url
# should be something like git@github.com:petersenna/fake.git
repo_url: git@github.com:petersenna/fake.git

# cloudspatch will push the results to this branch. Using ${com:name}
# works very well for me
branch: ${com:name}

# Compress stderr and stdout before committing to git, valid
# values: xz, no
compress: xz

# Paste your private key here keeping in mind that the config parser
# expect at least one leading space for each line of your private
# key. For github I use deploy keys instead of using my default ssh
# key.
key: -----BEGIN RSA PRIVATE KEY-----
 MIIEpAIBAAKCAQEA7SQQS+WTFO67OgZ1PGMo2fUtc81K2x/7gbz3Ln30bOuCbFLm
 +/oqToouhhLdd0o9Oe9JZ7m39LcIjl7tbZEQ2QxAHk/946vhrwUVBNX+fq6mwAGP
 GcU3FEjL7JirAjv6rd61VHx/hxUFEdt+MZ57lxPKONRG8RxB43Uh2TtXxvSXrkLe
 8DXY5nTAQHHPaR6U0FsfzuhKSXE7OpXk4OqnbI14CCRsnav7XoB8XY2E7y5ju/Er
 MMoL7G5MSN4CgGQ71XFHmCNzOgw3dlEzxWOgLmYpy7iY/4PpYbtdpHMEAPqPz6YW
 cskSqg2GAoKY9XePPHNz2jNsFSB3riT/jQBFowIDAQABAoIBABc4LcRQsUseaQSw
 dzA3gVt+DzpEgqzb/9NfPlC2EoXLtZSHtYg8oYHZM9763+Z7RW1zyZs3axSyC0tt
 bhAJYT3vXiPZr0FopgtuEvXLQkUDMt6gCHP8hH0e96Ct/iiU2OHHabfhDNecLkfm
 Vv/ixbUwQd+4oU2gd68e2/aaQej//8kgqA0zVqxktXtDRcAWrrOnJ4x52mo+VoKi
 AEkgy5vwtC0tPqc9/GceKO2Brtudv7Q3B6JvTe8rlMHr9lUrHh7LINuWDiGlNx5T
 S+3YmlLtBTdk2Fir33KPGb3y99pfrCVFyBJhntBpW4HeMMrRYr88nJqSSP303HiS
 /ddMkJECgYEA/U8AC6ZqjvUqi1N2v9I0wQmUT6h6LpDX6dGBrseUzs5Vj2+WTWmH
 Wqooe/JuRtKfFyWpwepchjeaPcA/n8HoujkRWtiXSF8b4uqTJCgkGlDfN3WtRwKZ
 9Zq+euB3iLhEOXtE93mpL7d4EfrX/6Yhc+9SYYHOsuYEinf3jBJUwGsCgYEA76kW
 VhtDGHwQ4k5paEJwwdnFm7RG+gG8CR+nTcp2K7pUyYXynyoQdJ4PePOdc+qrA0Nj
 yCobAbfMwlDl3ZzLPjGHUGo3uRbivF5Tktwjyi7HDPgC8+/mUTEfvb3uFcesit9L
 FfNaKfUria70Qb3+y8SEiKnmwWR+P5NPyIWLfakCgYEA8kz8LSitqzumy4k2APzx
 C2m/XYc6AIr6jaWjF+2/UScbvs2thzUXjUlQ2mcmx0Y3eavEO0KT6KsNNl5MPeP9
 Wwy1piGibE7V3PQndaGUDzwmmOVOr6s0XDP+WomWrcgdMqLQcK0GgidMil5Y+SkP
 vNdDBRRnBMdztoRU3b63JSsCgYByXmOtZccoKRS5mqfMvGAo8i7ONkLkze0ZAYUK
 p4KrLXmGzihRcnZ14HQLyV4rUiKYJRG6FPXcZQUO+iIoFsoa/PHRG09KQbSkJfOG
 Ew31T0toUfa+yI5F0saN+tRiim45u4OOjxpJCZnkU5x2vx+XyEljGolnYvioiDk7
 vRcrOQKBgQCxaX/FDHoWL6ZMf+CqBwN7Sr0n2JXkVVQjpp7LZ2TQiB3L3TSoIAK4
 k9Wujr1dD5J0jZZy4/wIE9E/yVOF+EvizaOLiFaqXtgmAEXq9k9Cbq1V1z/IGMm+
 fMvZmIy+WPp/77d24/iCwnljKJ4XTNR25Bl8H8NKhTvaIIhlznrrcA==
 -----END RSA PRIVATE KEY-----
 
[git_in]
# cloudspatch will checkout this git repository and run spatch in it.
# config_url points to a git configuration file. The example file
# includes the Linux kernel trees: linux, linux-next, linux-stable,
# and linux-staging (at least when I wrote this). If you want to
# use cloudspatch in a completely different project, consider
# creating your own version of the container coccinelle-linux-git
config_url: https://raw.githubusercontent.com/petersenna/docker/master/coccinelle-linux-git/config

# You can use anything that git checkout accept. You can specify one or
# more 'checkouts' using a comma as separator. Each 'checkout' will be
# processed independently with it's own output directory inside git_out.
# If you want to get all major Linux kernel versions, try this:
# $ git tag |egrep "^v2\.6\.[0-9]*$|^v[34]\.[0-9]*$"|awk '{printf("%s, ", $0)}'
#
checkout: v2.6.12, v2.6.15, v2.6.20, v2.6.25, v2.6.30, v2.6.35, v3.0, v3.10, v3.15, v3.5, v4.0, v4.2

